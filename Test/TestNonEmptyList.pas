unit TestNonEmptyList;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, Immutable, SysUtils, Classes;

type
  // Test methods for class TConsList

  TTestNonEmptyList = class(TTestCase)
  strict private
    FSingleItemList: IConsList<Integer>;
    FMultiItemList: IConsList<Integer>;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSingleItemIsEmpty;
    procedure TestSingleItemHead;
    procedure TestSingleItemTail;
    procedure TestSingleItemLength;
    procedure TestSingleItemCons;
  end;

implementation

procedure TTestNonEmptyList.SetUp;
begin
  FSingleItemList := TConsList<Integer>.Create(10);
  FMultiItemList := TConsList<Integer>.Create([2, 4, 6, 8, 10]);
end;

procedure TTestNonEmptyList.TearDown;
begin
  FSingleItemList := nil;
  FMultiItemList := nil;
end;

procedure TTestNonEmptyList.TestSingleItemIsEmpty;
var
  ReturnValue: Boolean;
begin
  ReturnValue := FSingleItemList.IsEmpty;
  CheckFalse(ReturnValue);
end;

procedure TTestNonEmptyList.TestSingleItemHead;
var
  ReturnValue: Integer;
begin
  ReturnValue := FSingleItemList.Head;
  CheckEquals(10, ReturnValue);
end;

procedure TTestNonEmptyList.TestSingleItemTail;
var
  ReturnValue: IConsList<Integer>;
begin
  ReturnValue := FSingleItemList.Tail;
  CheckTrue(ReturnValue.IsEmpty, 'List should be empty');
  CheckEquals(0, ReturnValue.Length, 'Length should be 0');
end;

procedure TTestNonEmptyList.TestSingleItemLength;
var
  ReturnValue: Integer;
begin
  ReturnValue := FSingleItemList.Length;
  CheckEquals(1, ReturnValue);
end;

procedure TTestNonEmptyList.TestSingleItemCons;
var
  ReturnValue: IConsList<Integer>;
  aHead: Integer;
begin
  aHead := 20;
  ReturnValue := FSingleItemList.Cons(aHead);
  // TODO: Validate method results
  CheckFalse(ReturnValue.IsEmpty, 'List should not be empty');
  CheckEquals(20, ReturnValue.Head, 'Head not correct');
  CheckEquals(2, ReturnValue.Length, 'Length not correct');

  CheckFalse(ReturnValue.Tail.IsEmpty, 'Tail should not be empty');
  CheckEquals(10, ReturnValue.Tail.Head, 'Tail.Head not correct');
  CheckEquals(1, ReturnValue.Tail.Length, 'Tail.Length not correct');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TTestNonEmptyList.Suite);
end.


